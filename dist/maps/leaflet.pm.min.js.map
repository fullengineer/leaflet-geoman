{"version":3,"sources":["leaflet.pm.js","Drag.js","Overlap.js","Snapping.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Edit.js","Draw/L.PM.Draw.Line.js","Draw/L.PM.Draw.Marker.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Line.js","Edit/L.PM.Edit.Marker.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["DragMixin","_initDraggableLayer","_this","this","_tempDragCoord","el","_layer","_path","L","DomUtil","addClass","onMouseUp","_map","dragging","enable","off","_dragging","_initMarkers","window","setTimeout","removeClass","fire","_fireEdit","onMouseMove","e","bringToFront","disable","_markerGroup","clearLayers","_onLayerDrag","on","latlng","deltaLatLng","lat","lng","coords","Polygon","_latlngs","newLatLngs","map","currentLatLng","setLatLngs","redraw","OverlapMixin","_applyPossibleCoordsChanges","_tempPolygon","latlngs","getLayers","getLatLngs","_poly","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","addTo","bringToBack","_handleOverlap","mainPoly","layers","_layerGroup","changed","resultingGeoJson","toGeoJSON","filter","layer","Object","is","intersect","turf","console","warn","difference","geometry","type","remove","SnapMixin","_initSnappableMarkers","options","snapDistance","_markers","forEach","marker","_handleSnapping","_cleanupSnapping","_unsnap","_snapLatLng","_snapList","debugIndicatorLines","line","originalEvent","altKey","undefined","_createSnapList","length","target","closestLayer","_calcClosestLayer","getLatLng","isMarker","Marker","snapLatLng","_checkPrioritiySnapping","minDistance","eventInfo","segment","layerInteractedWith","distance","setLatLng","A","B","C","distanceAC","_getDistance","distanceBC","closestVertexLatLng","shortestDistance","priorityDistance","snapLatlng","_this2","eachLayer","Polyline","push","debugLine","polyline","color","_latlng","_pmTempLayer","_this3","index","results","_calcLayerDistances","_this4","isPolygon","isPolyline","P","closestSegment","coord","nextIndex","_getDistanceToSegment","_getClosestPointOnSegment","latlngA","latlngB","maxzoom","getMaxZoom","Infinity","getZoom","project","closest","LineUtil","closestPointOnSegment","unproject","latLngToLayerPoint","pointToSegmentDistance","distanceTo","PM","initialize","addInitHooks","initLayerGroup","pm","Edit","LayerGroup","initMarker","initPolygon","Poly","initPolyline","Line","initMap","Map","addInitHook","Class","extend","Draw","Toolbar","addControls","enableDraw","shape","arguments","disableDraw","setPathOptions","removeLayer","_layers","toggleRemoval","enabled","globalEditEnabled","_globalEditMode","toggleGlobalEditMode","includes","snappable","templineStyle","hintlineStyle","dashArray","shapes","pathOptions","getShapes","Error","join","addButton","_shape","toolbarButtonName","Util","setOptions","_enabled","addLayer","_hintline","_hintMarker","icon","divIcon","className","_container","style","cursor","_createPolygonPoint","_syncHintMarker","_syncHintLine","toggleButton","toggle","fakeDragEvent","polyPoints","lastPolygonPoint","first","addLatLng","_createMarker","_finishShape","polylineLayer","draggable","polygonLayer","polygon","layerGroup","findLayers","_initLayer","getOptions","availableEvents","event","_fireEvent","fireEvent","toggleEdit","_options","find","poly","k","_createMiddleMarker","_origLatLng","_index","_onMarkerDragStart","_onMarkerDrag","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","middleMarker","middleIcon","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","m","nextMarkerIndex","prevMarkerIndex","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","middleMarkerPrevLatLng","markerEvent","edited","latlng1","latlng2","p1","p2","_add","_divideBy","_onDragEnd","Control","PMButton","position","_button","onAdd","container","buttonsDomNode","_makeButton","appendChild","onRemove","getText","text","getIconUrl","iconUrl","destroy","_update","toggleStatus","_applyStyleClasses","toggled","onCreate","_triggerClick","onClick","_clicked","afterClick","button","newButton","create","image","setAttribute","DomEvent","addListener","disableOtherButtons","triggerClickOnToggledButtons","disableClickPropagation","doToggle","drawMarker","drawPolygon","drawPolyline","editPolygon","dragPolygon","deleteLayer","buttons","_defineButtons","getButtons","_showHideButtons","_addButton","name","exceptThisButton","status","deleteButton","drawPolyButton","drawMarkerButton","drawLineButton","editButton","dragButton","btn","setPosition"],"mappings":"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","file":"leaflet.pm.min.js","sourcesContent":["'use strict';\n\nvar DragMixin = {\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        var el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp() {\n            // re-enable map drag\n            _this._layer._map.dragging.enable();\n\n            // clear up mousemove event\n            _this._layer._map.off('mousemove');\n\n            // clear up mouseup event\n            _this._layer.off('mouseup');\n\n            // if no drag happened, don't do anything\n            if (!_this._dragging) {\n                return false;\n            }\n\n            // show markers again\n            _this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this._layer.fire('pm:dragend');\n\n                // fire edit\n                _this._fireEdit();\n            }, 10);\n\n            return true;\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n            if (!_this._dragging) {\n                // set state\n                _this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this._layer.bringToFront();\n\n                // disbale map drag\n                _this._layer._map.dragging.disable();\n\n                // hide markers\n                _this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this._layer.fire('pm:dragstart');\n            }\n\n            _this._onLayerDrag(e);\n        };\n\n        this._layer.on('mousedown', function (e) {\n            // save for delta calculation\n            _this._tempDragCoord = e.latlng;\n\n            _this._layer.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this._layer._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging: function dragging() {\n        return this._dragging;\n    },\n    _onLayerDrag: function _onLayerDrag(e) {\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = void 0;\n\n        if (this._layer instanceof L.Polygon) {\n            coords = this._layer._latlngs[0];\n        } else {\n            coords = this._layer._latlngs;\n        }\n\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._layer.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    }\n};\n'use strict';\n\n// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n    _handleOverlap: function _handleOverlap() {\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n            return true;\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    }\n};\n'use strict';\n\nvar SnapMixin = {\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var _this = this;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach(function (marker) {\n            marker.off('drag', _this._handleSnapping, _this);\n            marker.on('drag', _this._handleSnapping, _this);\n\n            marker.off('dragend', _this._cleanupSnapping, _this);\n            marker.on('dragend', _this._cleanupSnapping, _this);\n        });\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n    _unsnap: function _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping: function _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach(function (line) {\n            line.remove();\n        });\n    },\n    _handleSnapping: function _handleSnapping(e) {\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if (e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if (this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if (this._snapList.length <= 0) {\n            return false;\n        }\n\n        var marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        var closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        var isMarker = closestLayer.layer instanceof L.Marker;\n\n        // find the final latlng that we want to snap to\n        var snapLatLng = void 0;\n        if (!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        var minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        var eventInfo = {\n            marker: marker,\n            snapLatLng: snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer };\n\n        if (closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            // check if the snapping position differs from the last snap\n            if (this._snapLatLng !== snapLatLng) {\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._layer.fire('pm:snap', eventInfo);\n            }\n        } else if (this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping: function _checkPrioritiySnapping(closestLayer) {\n        var map = this._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        var A = closestLayer.segment[0];\n        var B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        var C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        var distanceAC = this._getDistance(map, A, C);\n        var distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        var closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        var shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        var priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        var snapLatlng = void 0;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if (shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n    _createSnapList: function _createSnapList() {\n        var _this2 = this;\n\n        var layers = [];\n        var debugIndicatorLines = [];\n        var map = this._map;\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n\n                // this is for debugging\n                var debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(function (layer) {\n            return _this2._layer !== layer;\n        });\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(function (layer) {\n            return layer._latlng || layer._latlngs.length > 0;\n        });\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(function (layer) {\n            return !layer._pmTempLayer;\n        });\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer: function _calcClosestLayer(latlng, layers) {\n        var _this3 = this;\n\n        // the closest polygon to our dragged marker latlng\n        var closestLayer = {};\n\n        // loop through the layers\n        layers.forEach(function (layer, index) {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            var results = _this3._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            _this3.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if (closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n    _calcLayerDistances: function _calcLayerDistances(latlng, layer) {\n        var _this4 = this;\n\n        var map = this._map;\n\n        // is this a polyline, marker or polygon?\n        var isPolygon = layer instanceof L.Polygon;\n        var isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        var isMarker = layer instanceof L.Marker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        var P = latlng;\n\n        var coords = void 0;\n\n        // the coords of the layer\n        if (isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if (isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if (isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: coords,\n                distance: this._getDistance(map, coords, P)\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        var closestSegment = void 0;\n\n        // the shortest distance from P to closestSegment\n        var shortestDistance = void 0;\n\n        // loop through the coords of the layer\n        coords.forEach(function (coord, index) {\n            // take this coord (A)...\n            var A = coord;\n            var nextIndex = void 0;\n\n            // and the next coord (B) as points\n            if (isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            var B = coords[nextIndex];\n\n            if (B) {\n                // calc the distance between P and AB-segment\n                var distance = _this4._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if (shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        var C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance\n        };\n    },\n    _getClosestPointOnSegment: function _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        var maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        var P = map.project(latlng, maxzoom);\n        var A = map.project(latlngA, maxzoom);\n        var B = map.project(latlngB, maxzoom);\n        var closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment: function _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        var P = map.latLngToLayerPoint(latlng);\n        var A = map.latLngToLayerPoint(latlngA);\n        var B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance: function _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    }\n};\n\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n        this.addInitHooks();\n    },\n    addInitHooks: function addInitHooks() {\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            this.pm = new L.PM.Edit.Marker(this);\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n        function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n        function initPolyline() {\n            this.pm = new L.PM.Edit.Line(this);\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n        function initMap() {\n            this.pm = new L.PM.Map(this);\n        }\n\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Map = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls: function addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n        var options = arguments[1];\n\n        this.Draw.enable(shape, options);\n    },\n    disableDraw: function disableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.disable(shape);\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer: function removeLayer(e) {\n        var layer = e.target;\n        if (!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval: function toggleRemoval(enabled) {\n        var _this = this;\n\n        if (enabled) {\n            this.map.eachLayer(function (layer) {\n                layer.on('click', _this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer(function (layer) {\n                layer.off('click', _this.removeLayer);\n            });\n        }\n    },\n    globalEditEnabled: function globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    toggleGlobalEditMode: function toggleGlobalEditMode(options) {\n        // find all layers that are or inherit from Polylines...\n        var layers = [];\n        this.map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        if (this.globalEditEnabled()) {\n            // disable\n\n            this._globalEditMode = false;\n\n            layers.forEach(function (layer) {\n                layer.pm.disable();\n            });\n        } else {\n            // enable\n\n            this._globalEditMode = true;\n\n            layers.forEach(function (layer) {\n                layer.pm.enable(options);\n            });\n        }\n    }\n});\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n    includes: [SnapMixin],\n    options: {\n        snappable: true,\n        snapDistance: 20,\n        templineStyle: {\n            color: 'red'\n        },\n        hintlineStyle: {\n            color: 'red',\n            dashArray: [5, 5]\n        }\n    },\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly', 'Line', 'Marker'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape, options) {\n        if (!shape) {\n            throw new Error('Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(','));\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n'use strict';\n\nL.PM.Draw.Line = L.PM.Draw.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._layer = L.polyline([], this.options.templineStyle);\n        this._layer._pmTempLayer = true;\n        this._layerGroup.addLayer(this._layer);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n        this._hintMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintMarker);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        this._hintMarker.on('move', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint, this);\n        this._map.off('mousemove', this._syncHintMarker, this);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintMarker: function _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        if (this.options.snappable) {\n            var fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n    },\n    _syncHintLine: function _syncHintLine() {\n        var polyPoints = this._layer.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n\n            // set coords for hintline from marker to last vertex of drawin polyline\n            this._hintline.setLatLngs([lastPolygonPoint, this._hintMarker.getLatLng()]);\n        }\n    },\n\n    // TODO: rename this function to _createVertex\n    _createPolygonPoint: function _createPolygonPoint() {\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        var latlng = this._hintMarker.getLatLng();\n\n        // is this the first point?\n        var first = this._layer.getLatLngs().length === 0;\n\n        this._layer.addLatLng(latlng);\n        this._createMarker(latlng, first);\n\n        this._hintline.setLatLngs([latlng, latlng]);\n    },\n    _finishShape: function _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._layer.getLatLngs();\n        var polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    }\n});\n'use strict';\n\nL.PM.Draw.Marker = L.PM.Draw.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // enable edit mode for existing markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable: function disable() {\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker) {\n                layer.pm.disable();\n            }\n        });\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker: function _createMarker(e) {\n        // save coords of click\n        var latlng = e.latlng;\n\n        if (!latlng) {\n            return;\n        }\n\n        // create marker\n        var marker = new L.Marker(latlng, {\n            draggable: true\n        });\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker: marker, // DEPRECATED\n            layer: marker\n        });\n    }\n});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.Line.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape: function _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._layer.getLatLngs();\n        var polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if (first) {\n            marker.on('click', this._finishShape, this);\n        }\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(function (layer) {\n            return _this._initLayer(layer);\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n            _this._layers = _this.findLayers();\n\n            // init the newly added layer\n            if (e.layer.pm) {\n                _this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    findLayers: function findLayers() {\n        // get all layers of the layer group\n        var layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        // return them\n        return layers;\n    },\n    _initLayer: function _initLayer(layer) {\n        var _this2 = this;\n\n        // available events\n        var availableEvents = ['pm:edit', 'pm:remove', 'pm:dragstart', 'pm:drag', 'pm:dragend', 'pm:snap', 'pm:unsnap', 'pm:raiseMarkers', 'pm:markerdragend', 'pm:markerdragstart'];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach(function (event) {\n            layer.on(event, _this2._fireEvent, _this2);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Line = L.PM.Edit.extend({\n    initialize: function initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        this.options = options;\n\n        this._map = this._layer._map;\n\n        if (!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', function (e) {\n            _this.disable(e.target);\n        });\n\n        // preventOverlap needs the turf library. If it's not included, deactivate it again\n        // if(window.turf === undefined && this.options.preventOverlap) {\n        //     console.warn('TurfJS not found, preventOverlap is deactivated');\n        //     this.options.preventOverlap = false;\n        // }\n\n        if (this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        // if(this.options.preventOverlap) {\n        //\n        //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        //     this._layer.on('pm:drag', this._handleOverlap, this);\n        //\n        //     // set new coordinates, more details inside the function\n        //     this._layer.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n        // }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._layer : arguments[0];\n\n        // if it's not enabled, it doesn't need to be disabled\n        if (!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        return true;\n    },\n    _initMarkers: function _initMarkers() {\n        var map = this._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._layer._latlngs;\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length - 1; k += 1) {\n            var nextIndex = k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('move', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this2 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._layer._latlngs;\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._layer._latlngs;\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        if (marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if (marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? undefined : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        // or if the middlemarker would be between the first and last coordinate of a polyline\n        if (rightMarkerIndex && leftMarkerIndex && rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (m, i) {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDrag: function _onMarkerDrag(e) {\n        // dragged marker\n        var marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (marker._index === undefined) {\n            return;\n        }\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        if (marker._middleMarkerNext) {\n            var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if (marker._middleMarkerPrev) {\n            var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart: function _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e\n        });\n    },\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._layer.edited = true;\n        this._layer.fire('pm:edit');\n    },\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._map;\n        var p1 = map.project(latlng1);\n        var p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n});\n'use strict';\n\nL.PM.Edit.Marker = L.PM.Edit.extend({\n    initialize: function initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {\n            draggable: true,\n            snappable: true\n        } : arguments[0];\n\n        this.options = options;\n\n        this._map = this._layer._map;\n\n        if (this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if (this.options.snappable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd: function _onDragEnd(e) {\n        var marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n    },\n\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.Line.extend({\n    _initMarkers: function _initMarkers() {\n        var map = this._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._layer._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k += 1) {\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._layer._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._layer._latlngs[0];\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if (rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (m, i) {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    }\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize: function initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n    onAdd: function onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n    onRemove: function onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n    getText: function getText() {\n        return this._button.text;\n    },\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick: function _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton: function _makeButton(button) {\n        var _this = this;\n\n        var newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        var image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', function () {\n            if (_this._button.disableOtherButtons) {\n                _this._map.pm.Toolbar.triggerClickOnToggledButtons(_this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n    _applyStyleClasses: function _applyStyleClasses() {\n        if (!this._container) {\n            return;\n        }\n\n        if (!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n    _clicked: function _clicked() {\n        if (this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    }\n});\n'use strict';\n\n/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        editPolygon: true,\n        dragPolygon: false,\n        deleteLayer: true,\n        position: 'topleft'\n    },\n    initialize: function initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons: function getButtons() {\n        return this.buttons;\n    },\n    addControls: function addControls() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? this.options : arguments[0];\n\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons: function triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (var name in this.buttons) {\n            if (this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton: function toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons: function _defineButtons() {\n        var _this = this;\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            className: 'icon-delete',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleRemoval(_this.buttons.deleteLayer.toggled());\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawPolyButton = {\n            className: 'icon-polygon',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawMarkerButton = {\n            className: 'icon-marker',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawLineButton = {\n            className: 'icon-polyline',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var editButton = {\n            className: 'icon-edit',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleGlobalEditMode({\n                    snappable: true,\n                    draggable: true\n                });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var dragButton = {\n            className: 'icon-drag',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {},\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n    _showHideButtons: function _showHideButtons() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        for (var btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        for (var _btn in buttons) {\n            if (this.options[_btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[_btn].setPosition(this.options.position);\n                buttons[_btn].addTo(this.map);\n            }\n        }\n    }\n});","const DragMixin = {\n    _initDraggableLayer() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        const el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        const onMouseUp = () => {\n            // re-enable map drag\n            this._layer._map.dragging.enable();\n\n            // clear up mousemove event\n            this._layer._map.off('mousemove');\n\n            // clear up mouseup event\n            this._layer.off('mouseup');\n\n            // if no drag happened, don't do anything\n            if(!this._dragging) {\n                return false;\n            }\n\n            // show markers again\n            this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._layer.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n            return true;\n        };\n\n        const onMouseMove = (e) => {\n            if(!this._dragging) {\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._layer.bringToFront();\n\n                // disbale map drag\n                this._layer._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._layer.fire('pm:dragstart');\n            }\n\n            this._onLayerDrag(e);\n        };\n\n        this._layer.on('mousedown', (e) => {\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._layer.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._layer._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging() {\n        return this._dragging;\n    },\n\n    _onLayerDrag(e) {\n        // latLng of mouse event\n        const latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        const deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng,\n        };\n\n        // create the new coordinates array\n        let coords;\n\n        if(this._layer instanceof L.Polygon) {\n            coords = this._layer._latlngs[0];\n        } else {\n            coords = this._layer._latlngs;\n        }\n\n        const newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng,\n            };\n        });\n\n        // set new coordinates and redraw\n        this._layer.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    },\n};\n","// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges() {\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n            // get the new coordinates\n            const latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon(geoJson) {\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n\n    _handleOverlap() {\n        const mainPoly = this._poly;\n        const layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n            return true;\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n};\n","const SnapMixin = {\n    _initSnappableMarkers() {\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach((marker) => {\n            marker.off('drag', this._handleSnapping, this);\n            marker.on('drag', this._handleSnapping, this);\n\n            marker.off('dragend', this._cleanupSnapping, this);\n            marker.on('dragend', this._cleanupSnapping, this);\n        });\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n\n    _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach((line) => {\n            line.remove();\n        });\n    },\n    _handleSnapping(e) {\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if(e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if(this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if(this._snapList.length <= 0) {\n            return false;\n        }\n\n        const marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        const closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        const isMarker = closestLayer.layer instanceof L.Marker;\n\n        // find the final latlng that we want to snap to\n        let snapLatLng;\n        if(!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        const minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        const eventInfo = {\n            marker,\n            snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer, // for lack of a better property name\n        };\n\n        if(closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            // check if the snapping position differs from the last snap\n            if(this._snapLatLng !== snapLatLng) {\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._layer.fire('pm:snap', eventInfo);\n            }\n        } else if(this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping(closestLayer) {\n        const map = this._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        const A = closestLayer.segment[0];\n        const B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        const C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        const distanceAC = this._getDistance(map, A, C);\n        const distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        const closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        const shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        const priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        let snapLatlng;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if(shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n\n    _createSnapList() {\n        let layers = [];\n        const debugIndicatorLines = [];\n        const map = this._map;\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n\n                // this is for debugging\n                const debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(layer => this._layer !== layer);\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(layer => layer._latlng || layer._latlngs.length > 0);\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(layer => !layer._pmTempLayer);\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer(latlng, layers) {\n        // the closest polygon to our dragged marker latlng\n        let closestLayer = {};\n\n        // loop through the layers\n        layers.forEach((layer, index) => {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            const results = this._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            this.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if(closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n\n    _calcLayerDistances(latlng, layer) {\n        const map = this._map;\n\n        // is this a polyline, marker or polygon?\n        const isPolygon = layer instanceof L.Polygon;\n        const isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        const isMarker = layer instanceof L.Marker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        const P = latlng;\n\n        let coords;\n\n        // the coords of the layer\n        if(isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if(isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if(isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: coords,\n                distance: this._getDistance(map, coords, P),\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        let closestSegment;\n\n        // the shortest distance from P to closestSegment\n        let shortestDistance;\n\n        // loop through the coords of the layer\n        coords.forEach((coord, index) => {\n            // take this coord (A)...\n            const A = coord;\n            let nextIndex;\n\n            // and the next coord (B) as points\n            if(isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            const B = coords[nextIndex];\n\n            if(B) {\n                // calc the distance between P and AB-segment\n                const distance = this._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if(shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        const C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance,\n        };\n    },\n\n    _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        let maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        const P = map.project(latlng, maxzoom);\n        const A = map.project(latlngA, maxzoom);\n        const B = map.project(latlngB, maxzoom);\n        const closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        const P = map.latLngToLayerPoint(latlng);\n        const A = map.latLngToLayerPoint(latlngA);\n        const B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    },\n};\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize() {\n        this.addInitHooks();\n    },\n    addInitHooks() {\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            this.pm = new L.PM.Edit.Marker(this);\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n\n        function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n\n        function initPolyline() {\n            this.pm = new L.PM.Edit.Line(this);\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n\n        function initMap() {\n            this.pm = new L.PM.Map(this);\n        }\n\n        L.Map.addInitHook(initMap);\n    },\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw(shape = 'Poly', options) {\n        this.Draw.enable(shape, options);\n    },\n    disableDraw(shape = 'Poly') {\n        this.Draw.disable(shape);\n    },\n    setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer(e) {\n        const layer = e.target;\n        if(!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval(enabled) {\n        if(enabled) {\n            this.map.eachLayer((layer) => {\n                layer.on('click', this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer((layer) => {\n                layer.off('click', this.removeLayer);\n            });\n        }\n    },\n    globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    toggleGlobalEditMode(options) {\n        // find all layers that are or inherit from Polylines...\n        let layers = [];\n        this.map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(layer => !!layer.pm);\n\n        if(this.globalEditEnabled()) {\n            // disable\n\n            this._globalEditMode = false;\n\n            layers.forEach((layer) => {\n                layer.pm.disable();\n            });\n        } else {\n            // enable\n\n            this._globalEditMode = true;\n\n            layers.forEach((layer) => {\n                layer.pm.enable(options);\n            });\n        }\n    },\n});\n","L.PM.Draw = L.Class.extend({\n    includes: [SnapMixin],\n    options: {\n        snappable: true,\n        snapDistance: 20,\n        templineStyle: {\n            color: 'red',\n        },\n        hintlineStyle: {\n            color: 'red',\n            dashArray: [5, 5],\n        },\n    },\n    initialize(map) {\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly', 'Line', 'Marker'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n    },\n    setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable(shape, options) {\n        if(!shape) {\n            throw new Error(`Error: Please pass a shape as a parameter. Possible shapes are: ${this.getShapes().join(',')}`);\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable() {\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n    },\n    addControls() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    },\n});\n","L.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin],\n});\n","L.PM.Draw.Line = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._layer = L.polyline([], this.options.templineStyle);\n        this._layer._pmTempLayer = true;\n        this._layerGroup.addLayer(this._layer);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n        // this is the hintmarker on the mouse cursor\n        this._hintMarker = L.marker([0, 0], {\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n        this._hintMarker._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintMarker);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintMarker, this);\n\n        this._hintMarker.on('move', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint, this);\n        this._map.off('mousemove', this._syncHintMarker, this);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintMarker(e) {\n        // move the cursor marker\n        this._hintMarker.setLatLng(e.latlng);\n\n        if(this.options.snappable) {\n            const fakeDragEvent = e;\n            fakeDragEvent.target = this._hintMarker;\n            this._handleSnapping(fakeDragEvent);\n        }\n    },\n    _syncHintLine() {\n        const polyPoints = this._layer.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            const lastPolygonPoint = polyPoints[polyPoints.length - 1];\n\n            // set coords for hintline from marker to last vertex of drawin polyline\n            this._hintline.setLatLngs([lastPolygonPoint, this._hintMarker.getLatLng()]);\n        }\n    },\n    // TODO: rename this function to _createVertex\n    _createPolygonPoint() {\n        // get coordinate for new vertex by hintMarker (cursor marker)\n        const latlng = this._hintMarker.getLatLng();\n\n        // is this the first point?\n        const first = this._layer.getLatLngs().length === 0;\n\n        this._layer.addLatLng(latlng);\n        this._createMarker(latlng, first);\n\n\n        this._hintline.setLatLngs([latlng, latlng]);\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._layer.getLatLngs();\n        const polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer,\n        });\n    },\n    _createMarker(latlng) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    },\n});\n","L.PM.Draw.Marker = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // enable edit mode for existing markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable() {\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.disable();\n            }\n        });\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker(e) {\n        // save coords of click\n        const latlng = e.latlng;\n\n        if(!latlng) {\n            return;\n        }\n\n        // create marker\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n        });\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker,                     // DEPRECATED\n            layer: marker,\n        });\n    },\n});\n","L.PM.Draw.Poly = L.PM.Draw.Line.extend({\n\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._layer.getLatLngs();\n        const polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer,\n        });\n    },\n    _createMarker(latlng, first) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if(first) {\n            marker.on('click', this._finishShape, this);\n        }\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize(layerGroup) {\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(layer => this._initLayer(layer));\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n            this._layers = this.findLayers();\n\n            // init the newly added layer\n            if(e.layer.pm) {\n                this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    findLayers() {\n        // get all layers of the layer group\n        let layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(layer => !!layer.pm);\n\n        // return them\n        return layers;\n    },\n    _initLayer(layer) {\n        // available events\n        const availableEvents = [\n            'pm:edit',\n            'pm:remove',\n            'pm:dragstart',\n            'pm:drag',\n            'pm:dragend',\n            'pm:snap',\n            'pm:unsnap',\n            'pm:raiseMarkers',\n            'pm:markerdragend',\n            'pm:markerdragstart',\n        ];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach((event) => {\n            layer.on(event, this._fireEvent, this);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.enable(options);\n        });\n    },\n    disable() {\n        this._layers.forEach((layer) => {\n            layer.pm.disable();\n        });\n    },\n    enabled() {\n        const enabled = this._layers.find(layer => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging() {\n        const dragging = this._layers.find(layer => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions() {\n        return this._options;\n    },\n});\n","L.PM.Edit.Line = L.PM.Edit.extend({\n    initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {}) {\n        this.options = options;\n\n        this._map = this._layer._map;\n\n        if(!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', (e) => {\n            this.disable(e.target);\n        });\n\n\n        // preventOverlap needs the turf library. If it's not included, deactivate it again\n        // if(window.turf === undefined && this.options.preventOverlap) {\n        //     console.warn('TurfJS not found, preventOverlap is deactivated');\n        //     this.options.preventOverlap = false;\n        // }\n\n        if(this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        // if(this.options.preventOverlap) {\n        //\n        //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        //     this._layer.on('pm:drag', this._handleOverlap, this);\n        //\n        //     // set new coordinates, more details inside the function\n        //     this._layer.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n        // }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable(poly = this._layer) {\n        // if it's not enabled, it doesn't need to be disabled\n        if(!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        const el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        return true;\n    },\n\n    _initMarkers() {\n        const map = this._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs;\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length - 1; k += 1) {\n            const nextIndex = k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker(latlng, index) {\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('move', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker(leftM, rightM) {\n        const latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        const middleMarker = this._createMarker(latlng);\n        const middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            const icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', () => {\n                const icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs;\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs;\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        if(marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if(marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? undefined : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        // or if the middlemarker would be between the first and last coordinate of a polyline\n        if(rightMarkerIndex && leftMarkerIndex && rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _onMarkerDrag(e) {\n        // dragged marker\n        const marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(marker._index === undefined) {\n            return;\n        }\n\n        // the dragged markers neighbors\n        const nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        const prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        const markerLatLng = marker.getLatLng();\n        const prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        const nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        if(marker._middleMarkerNext) {\n            const middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if(marker._middleMarkerPrev) {\n            const middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n\n    _onMarkerDragEnd(e) {\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e,\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e,\n        });\n    },\n\n    _fireEdit() {\n        // fire edit event\n        this._layer.edited = true;\n        this._layer.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        const map = this._map;\n        const p1 = map.project(latlng1);\n        const p2 = map.project(latlng2);\n\n        const latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    },\n});\n","L.PM.Edit.Marker = L.PM.Edit.extend({\n    initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {\n        draggable: true,\n        snappable: true,\n    }) {\n        this.options = options;\n\n        this._map = this._layer._map;\n\n        if(this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if(this.options.snappable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n    },\n    _removeMarker(e) {\n        const marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd(e) {\n        const marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n    },\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers() {\n        const marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    },\n});\n","L.PM.Edit.Poly = L.PM.Edit.Line.extend({\n\n    _initMarkers() {\n        const map = this._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length; k += 1) {\n            const nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs[0];\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs[0];\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if(rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft',\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n\n    onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n\n    onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n\n    getText() {\n        return this._button.text;\n    },\n\n    getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle(e) {\n        if(typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton(button) {\n        const newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        const image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', () => {\n            if(this._button.disableOtherButtons) {\n                this._map.pm.Toolbar.triggerClickOnToggledButtons(this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _applyStyleClasses() {\n        if(!this._container) {\n            return;\n        }\n\n        if(!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n\n    _clicked() {\n        if(this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    },\n\n});\n","/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        editPolygon: true,\n        dragPolygon: false,\n        deleteLayer: true,\n        position: 'topleft',\n    },\n    initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons() {\n        return this.buttons;\n    },\n\n    addControls(options = this.options) {\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (const name in this.buttons) {\n            if(this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons() {\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        const deleteButton = {\n            className: 'icon-delete',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                this.map.pm.toggleRemoval(this.buttons.deleteLayer.toggled());\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawPolyButton = {\n            className: 'icon-polygon',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawMarkerButton = {\n            className: 'icon-marker',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawLineButton = {\n            className: 'icon-polyline',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const editButton = {\n            className: 'icon-edit',\n            onClick: () => {\n            },\n            afterClick: () => {\n                this.map.pm.toggleGlobalEditMode({\n                    snappable: true,\n                    draggable: true,\n                });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const dragButton = {\n            className: 'icon-drag',\n            onClick: () => {\n            },\n            afterClick: () => {\n\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n\n    _showHideButtons() {\n        // loop through all buttons\n        const buttons = this.getButtons();\n\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        for (const btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        for (const btn in buttons) {\n            if(this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].setPosition(this.options.position);\n                buttons[btn].addTo(this.map);\n            }\n        }\n    },\n});\n"],"sourceRoot":"/source/"}