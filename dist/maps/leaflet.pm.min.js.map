<<<<<<< HEAD
{"version":3,"sources":["leaflet.pm.js","Drag.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Edit.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["Draggable","zzJUSTATEST","console","log","L","PM","initialize","initLayerGroup","this","pm","Edit","LayerGroup","addInitHook","initPolygon","Poly","Polygon","initMap","Map","Class","extend","map","Draw","Toolbar","addControls","enableDraw","shape","arguments","length","undefined","enable","_this","_map","shapes","forEach","getShapes","join","disable","_this2","_this3","addButton","_shape","options","_enabled","_layerGroup","addTo","_polyline","polyline","color","addLayer","_hintline","dashArray","_container","style","cursor","on","_createPolygonPoint","_syncHintLine","fire","off","removeLayer","enabled","toggle","self","drawPolyButton","className","onClick","afterClick","e","doToggle","toggleStatus","_drawButton","Control","PMButton","toggled","_clicked","polyPoints","getLatLngs","lastPolygonPoint","setLatLngs","latlng","first","addLatLng","_createMarker","_finishPolygon","coords","polygonLayer","polygon","toggleEdit","layer","marker","Marker","draggable","icon","divIcon","layerGroup","_layers","getLayers","availableEvents","event","_fireEvent","target","getOptions","fireEvent","type","_options","find","dragging","includes","poly","_poly","_initMarkers","window","turf","preventOverlap","warn","_initDraggableLayer","_dragging","_markerGroup","clearLayers","el","_path","DomUtil","removeClass","_tempDragCoord","addClass","onMouseUp","_applyPossibleCoordsChanges","setTimeout","_fireEdit","onMouseMove","bringToFront","_onLayerDrag","deltaLatLng","lat","lng","_latlngs","newLatLngs","currentLatLng","redraw","_handleOverlap","_markers","k","nextIndex","_createMiddleMarker","index","_origLatLng","_index","_onMarkerDrag","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","getLatLng","middleMarker","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","_tempPolygon","latlngs","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","bringToBack","mainPoly","layers","changed","resultingGeoJson","toGeoJSON","filter","Object","is","intersect","difference","geometry","remove","nextMarkerIndex","prevMarkerIndex","_latlng","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","setLatLng","middleMarkerPrevLatLng","edited","latlng1","latlng2","p1","project","p2","unproject","_add","_divideBy","position","_button","setButton","onAdd","container","create","_makeButton","onRemove","button","iconUrl","getText","text","getIconUrl","destroy","_update","onCreate","newButton","image","setAttribute","DomEvent","addListener","disableClickPropagation","childNodes"],"mappings":"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","file":"leaflet.pm.min.js","sourcesContent":["'use strict';\n\nvar Draggable = {\n    zzJUSTATEST: function zzJUSTATEST() {\n        console.log('Mixin');\n    }\n};\n\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n\n        var initLayerGroup = function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        var initPolygon = function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n        var initMap = function initMap() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Map = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(this.map);\n        this.Toolbar = new L.PM.Toolbar(this.map);\n    },\n\n    addControls: function addControls() {\n        this.Draw.addControls();\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.enable(shape);\n    }\n});\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape) {\n\n        if (!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function enable(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], { color: 'red' });\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    addButton: function addButton(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick() {},\n            'afterClick': function afterClick(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function (e) {\n            if (e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function (e) {\n            if (e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n    },\n    _syncHintLine: function _syncHintLine(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishPolygon: function _finishPolygon() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if (first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        var availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach(function (layer) {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach(function (event) {\n                layer.on(event, _this._fireEvent, _this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = _this._layerGroup;\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n\n            _this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.extend({\n    includes: Draggable,\n    initialize: function initialize(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n        console.log(this);\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', function (e) {\n                _this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if (window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if (this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n    },\n\n    enabled: function enabled() {\n        return this._enabled;\n    },\n\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._poly : arguments[0];\n\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function dragging() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this2 = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp(e) {\n\n            // re-enable map drag\n            _this2._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            _this2._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            _this2._poly.off('mouseup');\n\n            // show markers again\n            _this2._initMarkers();\n\n            // set new coordinates, more details inside the function\n            _this2._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this2._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this2._poly.fire('pm:dragend');\n\n                // fire edit\n                _this2._fireEdit();\n            }, 10);\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n\n            if (!_this2._dragging) {\n\n                // set state\n                _this2._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this2._poly.bringToFront();\n\n                // disbale map drag\n                _this2._poly._map.dragging.disable();\n\n                // hide markers\n                _this2._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this2._poly.fire('pm:dragstart');\n            }\n\n            _this2._onLayerDrag(e);\n        };\n\n        this._poly.on('mousedown', function (e) {\n\n            // save for delta calculation\n            _this2._tempDragCoord = e.latlng;\n\n            _this2._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this2._poly._map.on('mousemove', onMouseMove);\n        });\n    },\n\n    _onLayerDrag: function _onLayerDrag(e) {\n\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = this._poly._latlngs[0];\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n    },\n\n    _initMarkers: function _initMarkers() {\n        var map = this._poly._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this3 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var icon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._poly._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        var coords = this._poly._latlngs[0];\n        var index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // create the new middlemarker\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        var leftM = this._markers[leftMarkerIndex];\n        var rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n    _handleOverlap: function _handleOverlap() {\n\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n\n    _onMarkerDrag: function _onMarkerDrag(e) {\n\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n    },\n\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function initialize(options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function onAdd(map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function onRemove(map) {},\n\n    setButton: function setButton(options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function getText() {\n        return this._button.text;\n    },\n\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _makeButton: function _makeButton(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) L.DomUtil.addClass(newButton, 'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent.addListener(newButton, 'click', button.onClick, this).addListener(newButton, 'click', this._clicked, this).addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _clicked: function _clicked() {\n\n        if (this._button.doToggle) {\n\n            if (this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0], 'active');\n            } else {\n                L.DomUtil.addClass(this._container.childNodes[0], 'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n\"use strict\";\n\nL.PM.Toolbar = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n    }\n});","var Draggable = {\n    zzJUSTATEST: function() {\n        console.log('Mixin');\n    }\n}\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function() {\n\n        var initLayerGroup = function() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n\n        var initPolygon = function() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n\n        var initMap = function() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(this.map);\n        this.Toolbar = new L.PM.Toolbar(this.map);\n    },\n    addControls: function() {\n        this.Draw.addControls();\n    },\n    enableDraw: function(shape = 'Poly') {\n        this.Draw.enable(shape);\n    }\n});\n","L.PM.Draw = L.Class.extend({\n\n    initialize: function(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n\n    },\n    getShapes: function() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function(shape) {\n\n        if(!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n\n    },\n    disable: function() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n\n    },\n    addControls: function() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    }\n});\n","L.PM.Edit = L.Class.extend({\n    \n});\n","L.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], {color: 'red'});\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', {shape: this._shape});\n\n    },\n    disable: function() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', {shape: this._shape});\n\n    },\n    enabled: function() {\n        return this._enabled;\n    },\n    toggle: function(options) {\n\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n\n    },\n    addButton: function(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n              'className': 'icon-polygon',\n              'onClick': function() {\n\n              },\n              'afterClick': function(e) {\n                  self.toggle();\n              },\n              'doToggle': true,\n              'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function(e) {\n            if(e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function(e) {\n            if(e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n\n    },\n    _syncHintLine: function(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n\n\n\n    },\n    _createPolygonPoint: function(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n\n    },\n    _finishPolygon: function() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if(first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function(layerGroup) {\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        let availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach((layer) => {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach((event) => {\n                layer.on(event, this._fireEvent, this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = this._layerGroup;\n        });\n\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n\n            this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function() {\n        this._layers.forEach(layer => {\n            layer.pm.disable();\n        });\n    },\n    enabled: function() {\n        let enabled = this._layers.find((layer) => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging: function() {\n        let dragging = this._layers.find((layer) => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions: function() {\n        return this._options;\n    }\n});\n","L.PM.Edit.Poly = L.PM.Edit.extend({\n    includes: Draggable,\n    initialize: function(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function(options = {}) {\n\n        console.log(this);\n\n        this.options = options;\n\n        if(!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', (e) => {\n                this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if(window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if(this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n\n    },\n\n    enabled: function() {\n        return this._enabled;\n    },\n\n    disable: function(poly = this._poly) {\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function() {\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        var onMouseUp = (e) => {\n\n            // re-enable map drag\n            this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            this._poly.off('mouseup');\n\n            // show markers again\n            this._initMarkers();\n\n            // set new coordinates, more details inside the function\n            this._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._poly.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n        }\n\n\n        var onMouseMove = (e) => {\n\n            if(!this._dragging) {\n\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._poly.bringToFront();\n\n                // disbale map drag\n                this._poly._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._poly.fire('pm:dragstart');\n\n\n            }\n\n            this._onLayerDrag(e);\n\n        }\n\n        this._poly.on('mousedown', (e) => {\n\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._poly._map.on('mousemove', onMouseMove);\n\n        });\n\n\n\n    },\n\n    _onLayerDrag: function(e) {\n\n        // latLng of mouse event\n        let latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        let deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        let coords = this._poly._latlngs[0];\n        let newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            }\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n\n    },\n\n    _initMarkers: function() {\n        let map = this._poly._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        let coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k+1 >= coords.length ? 0 : k+1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function(latlng, index) {\n\n        let marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function(leftM, rightM) {\n\n        let latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        let middleMarker = this._createMarker(latlng);\n        let icon = L.divIcon({className: 'marker-icon marker-icon-middle'})\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({className: 'marker-icon'});\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function() {\n                var icon = L.divIcon({className: 'marker-icon'});\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n\n\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        let latlng = newM.getLatLng();\n        let coords = this._poly._latlngs[0];\n        let index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _removeMarker: function(e) {\n        let marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        let coords = this._poly._latlngs[0];\n        let index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n\n        // create the new middlemarker\n        let leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        let rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        let leftM = this._markers[leftMarkerIndex];\n        let rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _applyPossibleCoordsChanges: function() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n\n    },\n\n    _drawTemporaryPolygon: function(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({opacity: 0, fillOpacity: 0});\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n\n    },\n    _handleOverlap: function() {\n\n        let mainPoly = this._poly;\n        let layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({opacity: 1, fillOpacity: 0.2});\n        }\n\n\n\n    },\n\n    _onMarkerDrag: function(e) {\n\n        // dragged marker\n        let marker = e.target;\n\n        // the dragged markers neighbors\n        let nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        let prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        let markerLatLng = marker.getLatLng();\n        let prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        let nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        let middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        let middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n    },\n\n    _onMarkerDragEnd: function(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n\n    },\n\n    _fireEdit: function () {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function (options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function (map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function (map) {\n    },\n\n    setButton: function (options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function () {\n        return this._button.text;\n    },\n\n    getIconUrl: function () {\n        return this._button.iconUrl;\n    },\n\n    destroy: function () {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function (e) {\n        if(typeof e === 'boolean'){\n            this._button.toggleStatus = e;\n        }\n        else{\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function () {\n        return this._button.toggleStatus;\n    },\n    onCreate: function() {\n        this.toggle(false);\n    },\n    _makeButton: function(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus)\n            L.DomUtil.addClass(newButton,'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent\n            .addListener(newButton, 'click', button.onClick, this)\n            .addListener(newButton, 'click', this._clicked, this)\n            .addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n\n    },\n\n    _clicked: function () {\n\n        if(this._button.doToggle){\n\n            if(this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0],'active');\n            }\n            else {\n                L.DomUtil.addClass(this._container.childNodes[0],'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n","L.PM.Toolbar = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n    }\n});\n"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["leaflet.pm.js","L.PM.js","L.PM.Draw.js","L.PM.Edit.js","L.Controls.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Poly.js"],"names":["L","PM","initialize","initLayerGroup","this","pm","Edit","LayerGroup","addInitHook","initPolygon","Poly","Polygon","initMap","Draw","Map","Class","extend","map","_this","_map","shapes","forEach","shape","getShapes","enableDraw","join","disableDraw","enable","_this2","disable","addControls","_this3","addButton","Control","PMButton","options","position","_button","setButton","onAdd","container","DomUtil","create","_container","_makeButton","onRemove","button","className","iconUrl","onClick","afterClick","doToggle","toggleStatus","getText","text","getIconUrl","destroy","_update","toggle","e","toggled","onCreate","newButton","addClass","image","setAttribute","DomEvent","addListener","_clicked","disableClickPropagation","removeClass","childNodes","_shape","_enabled","_layerGroup","addTo","_polyline","polyline","color","addLayer","_hintline","dashArray","style","cursor","on","_createPolygonPoint","_syncHintLine","fire","off","removeLayer","enabled","self","drawPolyButton","_drawButton","polyPoints","getLatLngs","length","lastPolygonPoint","setLatLngs","latlng","first","addLatLng","_createMarker","_finishPolygon","coords","polygonLayer","polygon","toggleEdit","layer","marker","Marker","draggable","icon","divIcon","layerGroup","_layers","getLayers","availableEvents","event","_fireEvent","target","getOptions","fireEvent","type","_options","find","dragging","poly","_poly","arguments","undefined","_initMarkers","window","turf","preventOverlap","console","warn","_initDraggableLayer","_dragging","_markerGroup","clearLayers","el","_path","_tempDragCoord","onMouseUp","_applyPossibleCoordsChanges","setTimeout","_fireEdit","onMouseMove","bringToFront","_onLayerDrag","deltaLatLng","lat","lng","_latlngs","newLatLngs","currentLatLng","redraw","_handleOverlap","_markers","k","nextIndex","_createMiddleMarker","index","_origLatLng","_index","_onMarkerDrag","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","getLatLng","middleMarker","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","_tempPolygon","latlngs","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","bringToBack","mainPoly","layers","changed","resultingGeoJson","toGeoJSON","filter","Object","is","intersect","difference","geometry","remove","nextMarkerIndex","prevMarkerIndex","_latlng","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","setLatLng","middleMarkerPrevLatLng","edited","latlng1","latlng2","p1","project","p2","unproject","_add","_divideBy"],"mappings":"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","file":"leaflet.pm.min.js","sourcesContent":["\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n\n        var initLayerGroup = function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        var initPolygon = function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n        var initMap = function initMap() {\n            this.pm = new L.PM.Draw(this);\n        };\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enableDraw: function enableDraw(shape) {\n\n        if (!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disableDraw();\n\n        // enable draw for a shape\n        this[shape].enable();\n    },\n    disableDraw: function disableDraw() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function initialize(options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function onAdd(map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function onRemove(map) {},\n\n    setButton: function setButton(options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function getText() {\n        return this._button.text;\n    },\n\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _makeButton: function _makeButton(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) L.DomUtil.addClass(newButton, 'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent.addListener(newButton, 'click', button.onClick, this).addListener(newButton, 'click', this._clicked, this).addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _clicked: function _clicked() {\n\n        if (this._button.doToggle) {\n\n            if (this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0], 'active');\n            } else {\n                L.DomUtil.addClass(this._container.childNodes[0], 'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function enable(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], { color: 'red' });\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    addButton: function addButton(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick() {},\n            'afterClick': function afterClick(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function (e) {\n            if (e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function (e) {\n            if (e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n    },\n    _syncHintLine: function _syncHintLine(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishPolygon: function _finishPolygon() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if (first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        var availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach(function (layer) {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach(function (event) {\n                layer.on(event, _this._fireEvent, _this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = _this._layerGroup;\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n\n            _this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.extend({\n\n    initialize: function initialize(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', function (e) {\n                _this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if (window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if (this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n    },\n\n    enabled: function enabled() {\n        return this._enabled;\n    },\n\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._poly : arguments[0];\n\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function dragging() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this2 = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp(e) {\n\n            // re-enable map drag\n            _this2._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            _this2._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            _this2._poly.off('mouseup');\n\n            // show markers again\n            _this2._initMarkers();\n\n            // set new coordinates, more details inside the function\n            _this2._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this2._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this2._poly.fire('pm:dragend');\n\n                // fire edit\n                _this2._fireEdit();\n            }, 10);\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n\n            if (!_this2._dragging) {\n\n                // set state\n                _this2._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this2._poly.bringToFront();\n\n                // disbale map drag\n                _this2._poly._map.dragging.disable();\n\n                // hide markers\n                _this2._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this2._poly.fire('pm:dragstart');\n            }\n\n            _this2._onLayerDrag(e);\n        };\n\n        this._poly.on('mousedown', function (e) {\n\n            // save for delta calculation\n            _this2._tempDragCoord = e.latlng;\n\n            _this2._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this2._poly._map.on('mousemove', onMouseMove);\n        });\n    },\n\n    _onLayerDrag: function _onLayerDrag(e) {\n\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = this._poly._latlngs[0];\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n    },\n\n    _initMarkers: function _initMarkers() {\n        var map = this._poly._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this3 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var icon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._poly._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        var coords = this._poly._latlngs[0];\n        var index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // create the new middlemarker\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        var leftM = this._markers[leftMarkerIndex];\n        var rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n    _handleOverlap: function _handleOverlap() {\n\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n\n    _onMarkerDrag: function _onMarkerDrag(e) {\n\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n    },\n\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function() {\n\n        var initLayerGroup = function() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n\n        var initPolygon = function() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n\n        var initMap = function() {\n            this.pm = new L.PM.Draw(this);\n        };\n        L.Map.addInitHook(initMap);\n\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Draw = L.Class.extend({\n\n    initialize: function(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n\n    },\n    getShapes: function() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enableDraw: function(shape) {\n\n        if(!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disableDraw();\n\n        // enable draw for a shape\n        this[shape].enable();\n\n    },\n    disableDraw: function() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n\n    },\n    addControls: function() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    }\n});\n","L.PM.Edit = L.Class.extend({\n\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function (options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function (map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function (map) {\n    },\n\n    setButton: function (options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function () {\n        return this._button.text;\n    },\n\n    getIconUrl: function () {\n        return this._button.iconUrl;\n    },\n\n    destroy: function () {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function (e) {\n        if(typeof e === 'boolean'){\n            this._button.toggleStatus = e;\n        }\n        else{\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function () {\n        return this._button.toggleStatus;\n    },\n    onCreate: function() {\n        this.toggle(false);\n    },\n    _makeButton: function(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus)\n            L.DomUtil.addClass(newButton,'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent\n            .addListener(newButton, 'click', button.onClick, this)\n            .addListener(newButton, 'click', this._clicked, this)\n            .addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n\n    },\n\n    _clicked: function () {\n\n        if(this._button.doToggle){\n\n            if(this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0],'active');\n            }\n            else {\n                L.DomUtil.addClass(this._container.childNodes[0],'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n","L.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], {color: 'red'});\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', {shape: this._shape});\n\n    },\n    disable: function() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', {shape: this._shape});\n\n    },\n    enabled: function() {\n        return this._enabled;\n    },\n    toggle: function(options) {\n\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n\n    },\n    addButton: function(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n              'className': 'icon-polygon',\n              'onClick': function() {\n\n              },\n              'afterClick': function(e) {\n                  self.toggle();\n              },\n              'doToggle': true,\n              'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function(e) {\n            if(e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function(e) {\n            if(e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n\n    },\n    _syncHintLine: function(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n\n\n\n    },\n    _createPolygonPoint: function(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n\n    },\n    _finishPolygon: function() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if(first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function(layerGroup) {\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        let availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach((layer) => {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach((event) => {\n                layer.on(event, this._fireEvent, this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = this._layerGroup;\n        });\n\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n\n            this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function() {\n        this._layers.forEach(layer => {\n            layer.pm.disable();\n        });\n    },\n    enabled: function() {\n        let enabled = this._layers.find((layer) => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging: function() {\n        let dragging = this._layers.find((layer) => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions: function() {\n        return this._options;\n    }\n});\n","L.PM.Edit.Poly = L.PM.Edit.extend({\n\n    initialize: function(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function(options = {}) {\n\n        this.options = options;\n\n        if(!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', (e) => {\n                this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if(window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if(this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n\n    },\n\n    enabled: function() {\n        return this._enabled;\n    },\n\n    disable: function(poly = this._poly) {\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function() {\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        var onMouseUp = (e) => {\n\n            // re-enable map drag\n            this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            this._poly.off('mouseup');\n\n            // show markers again\n            this._initMarkers();\n\n            // set new coordinates, more details inside the function\n            this._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._poly.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n        }\n\n\n        var onMouseMove = (e) => {\n\n            if(!this._dragging) {\n\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._poly.bringToFront();\n\n                // disbale map drag\n                this._poly._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._poly.fire('pm:dragstart');\n\n\n            }\n\n            this._onLayerDrag(e);\n\n        }\n\n        this._poly.on('mousedown', (e) => {\n\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._poly._map.on('mousemove', onMouseMove);\n\n        });\n\n\n\n    },\n\n    _onLayerDrag: function(e) {\n\n        // latLng of mouse event\n        let latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        let deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        let coords = this._poly._latlngs[0];\n        let newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            }\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n\n    },\n\n    _initMarkers: function() {\n        let map = this._poly._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        let coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k+1 >= coords.length ? 0 : k+1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function(latlng, index) {\n\n        let marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function(leftM, rightM) {\n\n        let latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        let middleMarker = this._createMarker(latlng);\n        let icon = L.divIcon({className: 'marker-icon marker-icon-middle'})\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({className: 'marker-icon'});\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function() {\n                var icon = L.divIcon({className: 'marker-icon'});\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n\n\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        let latlng = newM.getLatLng();\n        let coords = this._poly._latlngs[0];\n        let index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _removeMarker: function(e) {\n        let marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        let coords = this._poly._latlngs[0];\n        let index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n\n        // create the new middlemarker\n        let leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        let rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        let leftM = this._markers[leftMarkerIndex];\n        let rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _applyPossibleCoordsChanges: function() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n\n    },\n\n    _drawTemporaryPolygon: function(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({opacity: 0, fillOpacity: 0});\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n\n    },\n    _handleOverlap: function() {\n\n        let mainPoly = this._poly;\n        let layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({opacity: 1, fillOpacity: 0.2});\n        }\n\n\n\n    },\n\n    _onMarkerDrag: function(e) {\n\n        // dragged marker\n        let marker = e.target;\n\n        // the dragged markers neighbors\n        let nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        let prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        let markerLatLng = marker.getLatLng();\n        let prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        let nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        let middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        let middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n    },\n\n    _onMarkerDragEnd: function(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n\n    },\n\n    _fireEdit: function () {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n"],"sourceRoot":"/source/"}
>>>>>>> develop
