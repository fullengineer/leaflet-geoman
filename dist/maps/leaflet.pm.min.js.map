{"version":3,"sources":["leaflet.pm.js","L.PM.js","L.PM.Draw.js","js/L.Controls.js","js/L.PM.Draw.Poly.js","js/L.PM.Edit.Poly.js","js/L.PM.LayerGroup.js"],"names":["L","PM","initialize","initLayerGroup","this","pm","Edit","LayerGroup","addInitHook","initPolygon","Poly","Polygon","initMap","Draw","Map","Class","extend","map","_map","shapes","i","length","shape","getShapes","enableDraw","join","disableDraw","enable","disable","addControls","addButton","Control","PMButton","options","position","_button","setButton","onAdd","container","DomUtil","create","_container","_makeButton","onRemove","button","className","iconUrl","onClick","afterClick","doToggle","toggleStatus","getText","text","getIconUrl","destroy","_update","toggle","e","toggled","onCreate","newButton","addClass","image","setAttribute","DomEvent","addListener","_clicked","disableClickPropagation","removeClass","childNodes","_shape","_enabled","_layerGroup","addTo","_polyline","polyline","color","addLayer","_hintline","dashArray","style","cursor","on","_createPolygonPoint","_syncHintLine","fire","off","removeLayer","enabled","self","drawPolyButton","_drawButton","polyPoints","getLatLngs","lastPolygonPoint","setLatLngs","latlng","first","addLatLng","_createMarker","_finishPolygon","coords","polygonLayer","polygon","toggleEdit","layer","marker","Marker","draggable","icon","divIcon","poly","_poly","_this","arguments","undefined","_initMarkers","target","window","turf","preventOverlap","console","warn","_initDraggableLayer","_dragging","_markerGroup","clearLayers","el","_path","dragging","_this2","_tempDragCoord","onMouseUp","_applyPossibleCoordsChanges","setTimeout","_fireEdit","onMouseMove","bringToFront","_onLayerDrag","deltaLatLng","lat","lng","_latlngs","newLatLngs","currentLatLng","redraw","_handleOverlap","_markers","k","nextIndex","_createMiddleMarker","index","_origLatLng","_index","_onMarkerDrag","_onMarkerDragEnd","_removeMarker","leftM","rightM","_this3","_calcMiddleLatLng","getLatLng","middleMarker","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","leftMarkerIndex","rightMarkerIndex","_tempPolygon","latlngs","getLayers","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","bringToBack","mainPoly","layers","changed","resultingGeoJson","toGeoJSON","filter","Object","is","intersect","difference","geometry","type","remove","nextMarkerIndex","prevMarkerIndex","_latlng","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","setLatLng","middleMarkerPrevLatLng","edited","latlng1","latlng2","p1","project","p2","unproject","_add","_divideBy","layerGroup","_layers","availableEvents","forEach","event","_fireEvent","getOptions","fireEvent","_options"],"mappings":"AAAA,YCOAA,GAAEC,GAAKD,EAAEC,KACLC,WAAY,WAER,GAAIC,GAAiB,WACjBC,KAAKC,GAAK,GAAIL,GAAEC,GAAGK,KAAKC,WAAWH,MAEvCJ,GAAEO,WAAWC,YAAYL,EAGzB,IAAIM,GAAc,WACdL,KAAKC,GAAK,GAAIL,GAAEC,GAAGK,KAAKI,KAAKN,MAEjCJ,GAAEW,QAAQH,YAAYC,EAGtB,IAAIG,GAAU,WACVR,KAAKC,GAAK,GAAIL,GAAEC,GAAGY,KAAKT,MAE5BJ,GAAEc,IAAIN,YAAYI,IAGtBN,SAIJN,EAAEC,GAAGC,aChCLF,EAAEC,GAAGY,KAAOb,EAAEe,MAAMC,QAEhBd,WAAY,SAASe,GAGjBb,KAAKc,KAAOD,EAGZb,KAAKe,QAAU,OAGf,KAAI,GAAIC,GAAE,EAAGA,EAAEhB,KAAKe,OAAOE,OAAQD,IAAK,CACpC,GAAIE,GAAQlB,KAAKe,OAAOC,EACxBhB,MAAKkB,GAAS,GAAItB,GAAEC,GAAGY,KAAKS,GAAOlB,KAAKc,QAIhDK,UAAW,WAEP,MAAOnB,MAAKe,QAEhBK,WAAY,SAASF,GAEjB,IAAIA,EACA,KAAM,mEAAqElB,KAAKmB,YAAYE,KAAK,IAIrGrB,MAAKsB,cAGLtB,KAAKkB,GAAOK,UAGhBD,YAAa,WAKT,IAAI,GAAIN,GAAE,EAAGA,EAAEhB,KAAKe,OAAOE,OAAQD,IAAK,CACpC,GAAIE,GAAQlB,KAAKe,OAAOC,EACxBhB,MAAKkB,GAAOM,YAIpBC,YAAa,WAET,IAAI,GAAIT,GAAE,EAAGA,EAAEhB,KAAKe,OAAOE,OAAQD,IAAK,CACpC,GAAIE,GAAQlB,KAAKe,OAAOC,EACxBhB,MAAKkB,GAAOQ,gBCjDxB9B,EAAE+B,QAAQC,SAAWhC,EAAE+B,QAAQf,QAC3BiB,SACIC,SAAU,WAEdhC,WAAY,SAAU+B,GAClB7B,KAAK+B,WACL/B,KAAKgC,UAAUH,IAGnBI,MAAO,SAAUpB,GAEbb,KAAKc,KAAOD,CACZ,IAAIqB,GAAYtC,EAAEuC,QAAQC,OAAO,MAAO,yBAKxC,OAHApC,MAAKqC,WAAaH,EAElBlC,KAAKsC,YAAYtC,KAAK+B,SACf/B,KAAKqC,YAGhBE,SAAU,SAAU1B,KAGpBmB,UAAW,SAAUH,GACjB,GAAIW,IACAC,UAAaZ,EAAQY,UACrBC,QAAWb,EAAQa,QACnBC,QAAWd,EAAQc,QACnBC,WAAcf,EAAQe,WACtBC,SAAYhB,EAAQgB,SACpBC,aAAgBjB,EAAQiB,aAG5B9C,MAAK+B,QAAUS,GAGnBO,QAAS,WACL,MAAO/C,MAAK+B,QAAQiB,MAGxBC,WAAY,WACR,MAAOjD,MAAK+B,QAAQW,SAGxBQ,QAAS,WACLlD,KAAK+B,WACL/B,KAAKmD,WAGTC,OAAQ,SAAUC,GACE,iBAANA,GACNrD,KAAK+B,QAAQe,aAAeO,EAG5BrD,KAAK+B,QAAQe,cAAgB9C,KAAK+B,QAAQe,cAGlDQ,QAAS,WACL,MAAOtD,MAAK+B,QAAQe,cAExBS,SAAU,WACNvD,KAAKoD,QAAO,IAEhBd,YAAa,SAASE,GAElB,GAAIgB,GAAY5D,EAAEuC,QAAQC,OAAO,MAAO,iCAAkCpC,KAAKqC,WAC5EG,GAAOM,cACNlD,EAAEuC,QAAQsB,SAASD,EAAU,SAEjC,IAAIE,GAAQ9D,EAAEuC,QAAQC,OAAO,MAAO,eAAgBoB,EAcpD,OAbIhB,GAAOE,SACPgB,EAAMC,aAAa,MAAOnB,EAAOE,SAEjCF,EAAOC,WACP7C,EAAEuC,QAAQsB,SAASC,EAAOlB,EAAOC,WAGrC7C,EAAEgE,SACGC,YAAYL,EAAW,QAAShB,EAAOG,QAAS3C,MAChD6D,YAAYL,EAAW,QAASxD,KAAK8D,SAAU9D,MAC/C6D,YAAYL,EAAW,QAAShB,EAAOI,WAAY5C,MAExDJ,EAAEgE,SAASG,wBAAwBP,GAC5BA,GAIXM,SAAU,WAEH9D,KAAK+B,QAAQc,WAET7C,KAAK+B,QAAQe,aACZlD,EAAEuC,QAAQ6B,YAAYhE,KAAKqC,WAAW4B,WAAW,GAAG,UAGpDrE,EAAEuC,QAAQsB,SAASzD,KAAKqC,WAAW4B,WAAW,GAAG,UAErDjE,KAAKoD,aCjGjBxD,EAAEC,GAAGY,KAAKH,KAAOV,EAAEC,GAAGY,KAAKG,QAEvBd,WAAY,SAASe,GACjBb,KAAKc,KAAOD,EACZb,KAAKkE,OAAS,QAElB3C,OAAQ,SAASM,GAGb7B,KAAKmE,UAAW,EAGhBnE,KAAKoE,YAAc,GAAIxE,GAAEO,WACzBH,KAAKoE,YAAYC,MAAMrE,KAAKc,MAG5Bd,KAAKsE,UAAY1E,EAAE2E,aAAcC,MAAO,QACxCxE,KAAKoE,YAAYK,SAASzE,KAAKsE,WAG/BtE,KAAK0E,UAAY9E,EAAE2E,aACfC,MAAO,MACPG,WAAY,EAAG,KAEnB3E,KAAKoE,YAAYK,SAASzE,KAAK0E,WAI/B1E,KAAKc,KAAKuB,WAAWuC,MAAMC,OAAS,YAGpC7E,KAAKc,KAAKgE,GAAG,QAAS9E,KAAK+E,oBAAqB/E,MAGhDA,KAAKc,KAAKgE,GAAG,YAAa9E,KAAKgF,cAAehF,MAG9CA,KAAKc,KAAKmE,KAAK,gBAAiB/D,MAAOlB,KAAKkE,UAGhD1C,QAAS,WAIDxB,KAAKmE,WAITnE,KAAKmE,UAAW,EAGhBnE,KAAKc,KAAKuB,WAAWuC,MAAMC,OAAS,UAGpC7E,KAAKc,KAAKoE,IAAI,QAASlF,KAAK+E,qBAC5B/E,KAAKc,KAAKoE,IAAI,YAAalF,KAAKgF,eAGhChF,KAAKc,KAAKqE,YAAYnF,KAAKoE,aAG3BpE,KAAKc,KAAKmE,KAAK,cAAe/D,MAAOlB,KAAKkE,WAG9CkB,QAAS,WACL,MAAOpF,MAAKmE,UAEhBf,OAAQ,SAASvB,GAEV7B,KAAKoF,UACJpF,KAAKwB,UAELxB,KAAKuB,OAAOM,IAIpBH,UAAW,SAASb,GAEhB,GAAIwE,GAAOrF,KAEPsF,GACE7C,UAAa,eACbE,QAAW,aAGXC,WAAc,SAASS,GACnBgC,EAAKjC,UAETP,UAAY,EACZC,cAAgB,EAiBtB,OAdA9C,MAAKuF,YAAc,GAAI3F,GAAE+B,QAAQC,SAAS0D,GAAgBjB,MAAMrE,KAAKc,MAErEd,KAAKc,KAAKgE,GAAG,eAAgB,SAASzB,GAC/BA,EAAEnC,QAAUmE,EAAKnB,QAAWmB,EAAKE,YAAYjC,WAC5C+B,EAAKE,YAAYzB,aAIzB9D,KAAKc,KAAKgE,GAAG,aAAc,SAASzB,GAC7BA,EAAEnC,QAAUmE,EAAKnB,QAAUmB,EAAKE,YAAYjC,WAC3C+B,EAAKE,YAAYzB,aAIlB9D,KAAKuF,aAGhBP,cAAe,SAAS3B,GAEpB,GAAImC,GAAaxF,KAAKsE,UAAUmB,YAEhC,IAAGD,EAAWvE,OAAS,EAAG,CACtB,GAAIyE,GAAmBF,EAAWA,EAAWvE,OAAS,EACtDjB,MAAK0E,UAAUiB,YAAYD,EAAkBrC,EAAEuC,WAMvDb,oBAAqB,SAAS1B,GAG1B,GAAIwC,GAA+C,IAAvC7F,KAAKsE,UAAUmB,aAAaxE,QAAe,GAAO,CAE9DjB,MAAKsE,UAAUwB,UAAUzC,EAAEuC,QAC3B5F,KAAK+F,cAAc1C,EAAEuC,OAAQC,GAG7B7F,KAAK0E,UAAUiB,YAAYtC,EAAEuC,OAAQvC,EAAEuC,UAG3CI,eAAgB,WAEZ,GAAIC,GAASjG,KAAKsE,UAAUmB,aACxBS,EAAetG,EAAEuG,QAAQF,GAAQ5B,MAAMrE,KAAKc,KAEhDoF,GAAajG,GAAGmG,aAEhBpG,KAAKwB,UAELxB,KAAKc,KAAKmE,KAAK,aACX/D,MAAOlB,KAAKkE,OACZmC,MAAOH,KAGfH,cAAe,SAASH,EAAQC,GAE5B,GAAIS,GAAS,GAAI1G,GAAE2G,OAAOX,GACtBY,WAAW,EACXC,KAAM7G,EAAE8G,SAASjE,UAAW,iBAShC,OANAzC,MAAKoE,YAAYK,SAAS6B,GAEvBT,GACCS,EAAOxB,GAAG,QAAS9E,KAAKgG,eAAgBhG,MAGrCsG,KChKf1G,EAAEC,GAAGK,KAAKI,KAAOV,EAAEe,MAAMC,QAErBd,WAAY,SAAS6G,GACjB3G,KAAK4G,MAAQD,EACb3G,KAAKmE,UAAW,GAGpBiC,WAAY,SAASvE,GACb7B,KAAKoF,UAGLpF,KAAKwB,UAFLxB,KAAKuB,OAAOM,IAMpBN,OAAQ,WAAuB,GAAAsF,GAAA7G,KAAd6B,EAAciF,UAAA7F,QAAA,GAAA8F,SAAAD,UAAA,MAAAA,UAAA,EAE3B9G,MAAK6B,QAAUA,EAEX7B,KAAKoF,YAELpF,KAAKmE,UAAW,EAGhBnE,KAAKgH,eAGLhH,KAAK4G,MAAM9B,GAAG,SAAU,SAACzB,GACrBwD,EAAKrF,QAAQ6B,EAAE4D,UAIAF,SAAhBG,OAAOC,MAAsBnH,KAAK6B,QAAQuF,iBACzCC,QAAQC,KAAK,mDACbtH,KAAK6B,QAAQuF,gBAAiB,GAG/BpH,KAAK6B,QAAQ2E,WACZxG,KAAKuH,wBAMjBnC,QAAS,WACL,MAAOpF,MAAKmE,UAGhB3C,QAAS,WAA4B,GAAnBmF,GAAmBG,UAAA7F,QAAA,GAAA8F,SAAAD,UAAA,GAAZ9G,KAAK4G,MAAOE,UAAA,EAGjC,IAAGH,EAAK1G,GAAGuH,UACP,OAAO,CAEXb,GAAK1G,GAAGkE,UAAW,EACnBwC,EAAK1G,GAAGwH,aAAaC,cAGrBf,EAAKzB,IAAI,aACTyB,EAAKzB,IAAI,UAGT,IAAIyC,GAAKhB,EAAKiB,KACdhI,GAAEuC,QAAQ6B,YAAY2D,EAAI,yBAG9BE,SAAU,WACN,MAAO7H,MAAKwH,WAGhBD,oBAAqB,WAAW,GAAAO,GAAA9H,IAG5BA,MAAK+H,cAGL,IAAIJ,GAAK3H,KAAK4G,MAAMgB,KACpBhI,GAAEuC,QAAQsB,SAASkE,EAAI,uBAGvB,IAAIK,GAAY,SAAC3E,GAGbyE,EAAKlB,MAAM9F,KAAK+G,SAAStG,SAGzBuG,EAAKlB,MAAM9F,KAAKoE,IAAI,aAGpB4C,EAAKlB,MAAM1B,IAAI,WAGf4C,EAAKd,eAGLc,EAAKG,8BAILf,OAAOgB,WAAW,WAEdJ,EAAKN,WAAY,EACjB5H,EAAEuC,QAAQ6B,YAAY2D,EAAI,uBAG1BG,EAAKlB,MAAM3B,KAAK,cAGhB6C,EAAKK,aACN,KAKHC,EAAc,SAAC/E,GAEXyE,EAAKN,YAGLM,EAAKN,WAAY,EACjB5H,EAAEuC,QAAQsB,SAASkE,EAAI,uBAGvBG,EAAKlB,MAAMyB,eAGXP,EAAKlB,MAAM9F,KAAK+G,SAASrG,UAGzBsG,EAAKL,aAAaC,cAGlBI,EAAKlB,MAAM3B,KAAK,iBAKpB6C,EAAKQ,aAAajF,GAItBrD,MAAK4G,MAAM9B,GAAG,YAAa,SAACzB,GAGxByE,EAAKC,eAAiB1E,EAAEuC,OAExBkC,EAAKlB,MAAM9B,GAAG,UAAWkD,GAIzBF,EAAKlB,MAAM9F,KAAKgE,GAAG,YAAasD,MAQxCE,aAAc,SAASjF,GAGnB,GAAIuC,GAASvC,EAAEuC,OAGX2C,GACAC,IAAK5C,EAAO4C,IAAMxI,KAAK+H,eAAeS,IACtCC,IAAK7C,EAAO6C,IAAMzI,KAAK+H,eAAeU,KAItCxC,EAASjG,KAAK4G,MAAM8B,SAAS,GAC7BC,EAAa1C,EAAOpF,IAAI,SAAC+H,GACzB,OACIJ,IAAKI,EAAcJ,IAAMD,EAAYC,IACrCC,IAAKG,EAAcH,IAAMF,EAAYE,MAK7CzI,MAAK4G,MAAMjB,WAAWgD,GAAYE,SAGlC7I,KAAK+H,eAAiBnC,EAGnB5F,KAAK6B,QAAQuF,gBACZpH,KAAK8I,iBAIT9I,KAAK4G,MAAM3B,KAAK,YAIpB+B,aAAc,WACV,GAAInG,GAAMb,KAAK4G,MAAM9F,IAGlBd,MAAKyH,cACJzH,KAAKyH,aAAaC,cAItB1H,KAAKyH,aAAe,GAAI7H,GAAEO,WAC1BU,EAAI4D,SAASzE,KAAKyH,aAGlB,IAAIxB,GAASjG,KAAK4G,MAAM8B,SAAS,EAGjC1I,MAAK+I,SAAW9C,EAAOpF,IAAIb,KAAK+F,cAAe/F,KAG/C,KAAI,GAAIgJ,GAAI,EAAGA,EAAI/C,EAAOhF,OAAQ+H,IAAK,CAEnC,GAAIC,GAAYD,EAAE,GAAK/C,EAAOhF,OAAS,EAAI+H,EAAE,CAC7ChJ,MAAKkJ,oBACDlJ,KAAK+I,SAASC,GAAIhJ,KAAK+I,SAASE,MAO5ClD,cAAe,SAASH,EAAQuD,GAE5B,GAAI7C,GAAS,GAAI1G,GAAE2G,OAAOX,GACtBY,WAAW,EACXC,KAAM7G,EAAE8G,SAASjE,UAAW,iBAYhC,OATA6D,GAAO8C,YAAcxD,EACrBU,EAAO+C,OAASF,EAEhB7C,EAAOxB,GAAG,OAAQ9E,KAAKsJ,cAAetJ,MACtCsG,EAAOxB,GAAG,UAAW9E,KAAKuJ,iBAAkBvJ,MAC5CsG,EAAOxB,GAAG,cAAe9E,KAAKwJ,cAAexJ,MAE7CA,KAAKyH,aAAahD,SAAS6B,GAEpBA,GAKX4C,oBAAqB,SAASO,EAAOC,GAAQ,GAAAC,GAAA3J,KAErC4F,EAAS5F,KAAK4J,kBAAkBH,EAAMI,YAAaH,EAAOG,aAE1DC,EAAe9J,KAAK+F,cAAcH,GAClCa,EAAO7G,EAAE8G,SAASjE,UAAW,kCACjCqH,GAAaC,QAAQtD,GAGrBgD,EAAMO,kBAAoBF,EAC1BJ,EAAOO,kBAAoBH,EAE3BA,EAAahF,GAAG,QAAS,WAKrB,GAAI2B,GAAO7G,EAAE8G,SAASjE,UAAW,eACjCqH,GAAaC,QAAQtD,GAErBkD,EAAKO,WAAWJ,EAAcL,EAAOC,KAEzCI,EAAahF,GAAG,YAAa,WAIzBgF,EAAahF,GAAG,UAAW,WACvB,GAAI2B,GAAO7G,EAAE8G,SAASjE,UAAW,eACjCqH,GAAaC,QAAQtD,GAErBqD,EAAa5E,IAAI,aAGrByE,EAAKO,WAAWJ,EAAcL,EAAOC,MAO7CQ,WAAY,SAASC,EAAMV,EAAOC,GAG9BS,EAAKjF,IAAI,aACTiF,EAAKjF,IAAI,QAGT,IAAIU,GAASuE,EAAKN,YACd5D,EAASjG,KAAK4G,MAAM8B,SAAS,GAC7BS,EAAQM,EAAMJ,OAAS,CAE3BpD,GAAOmE,OAAOjB,EAAO,EAAGvD,GAGxBuE,EAAKf,YAAcnD,EAAOkD,GAG1BnJ,KAAK+I,SAASqB,OAAOjB,EAAO,EAAGgB,GAC/BnK,KAAK+I,SAASlI,IAAI,SAACyF,EAAQtF,GAAT,MAAesF,GAAO+C,OAASrI,IAGjDhB,KAAKkJ,oBAAoBO,EAAOU,GAChCnK,KAAKkJ,oBAAoBiB,EAAMT,GAG/B1J,KAAKmI,aAKTqB,cAAe,SAASnG,GACpB,GAAIiD,GAASjD,EAAE4D,MAGf,IAAqBF,SAAlBT,EAAO+C,OAAV,CAKA,GAAIpD,GAASjG,KAAK4G,MAAM8B,SAAS,GAC7BS,EAAQ7C,EAAO+C,MAEnBpD,GAAOmE,OAAOjB,EAAO,GACrBnJ,KAAK4G,MAAMiC,SAGX7I,KAAKyH,aAAatC,YAAYmB,EAAO2D,mBACrCjK,KAAKyH,aAAatC,YAAYmB,EAAO0D,mBACrChK,KAAKyH,aAAatC,YAAYmB,EAI9B,IAAI+D,GAA8B,EAAZlB,EAAQ,EAAQnJ,KAAK+I,SAAS9H,OAAS,EAAIkI,EAAQ,EACrEmB,EAAmBnB,EAAQ,GAAKnJ,KAAK+I,SAAS9H,OAAS,EAAIkI,EAAQ,EAEnEM,EAAQzJ,KAAK+I,SAASsB,GACtBX,EAAS1J,KAAK+I,SAASuB,EAC3BtK,MAAKkJ,oBAAoBO,EAAOC,GAIhC1J,KAAK+I,SAASqB,OAAOjB,EAAO,GAC5BnJ,KAAK+I,SAASlI,IAAI,SAACyF,EAAQtF,GAAT,MAAesF,GAAO+C,OAASrI,IAG9ChB,KAAK6B,QAAQuF,iBACZpH,KAAK8I,iBACL9I,KAAKiI,+BAITjI,KAAKmI,cAKTF,4BAA6B,WAMzB,GAAGjI,KAAKuK,aAAc,CAGlB,GAAIC,GAAUxK,KAAKuK,aAAaE,YAAY,GAAGhF,YAG/CzF,MAAK4G,MAAMjB,WAAW6E,GAAS3B,SAG/B7I,KAAKgH,iBAKb0D,sBAAuB,SAASC,GAG5B3K,KAAK4G,MAAMgE,UAAUC,QAAS,EAAGC,YAAa,IAG9C9K,KAAKuK,aAAe3K,EAAE+K,QAAQA,GAAStG,MAAMrE,KAAK4G,MAAM9F,MAAMiK,eAGlEjC,eAAgB,WAEZ,GAAIkC,GAAWhL,KAAK4G,MAChBqE,EAASjL,KAAKoE,YAAYqG,YAC1BS,GAAU,EACVC,EAAmBnL,KAAK4G,MAAMwE,WAElCH,GACCI,OAAO,SAAAhF,GAAA,OAAUiF,OAAOC,GAAGlF,EAAO2E,KAClCnK,IAAI,SAACwF,GAEF,GAAImF,GAAAA,MAIJ,KACIA,EAAYrE,KAAKqE,UAAUL,EAAkB9E,EAAM+E,aACrD,MAAM/H,GACJgE,QAAQC,KAAK,eAGdkE,IACCL,EAAmBhE,KAAKsE,WAAWN,EAAkB9E,EAAM+E,aAGrB,iBAAnCD,EAAiBO,SAASC,OACzBT,GAAU,MAMnBlL,KAAKuK,eACJvK,KAAKuK,aAAaqB,eACX5L,MAAKuK,cAGbW,EACClL,KAAK0K,sBAAsBS,GAE3BnL,KAAK4G,MAAMgE,UAAUC,QAAS,EAAGC,YAAa,MAOtDxB,cAAe,SAASjG,GAGpB,GAAIiD,GAASjD,EAAE4D,OAGX4E,EAAkBvF,EAAO+C,OAAS,GAAKrJ,KAAK+I,SAAS9H,OAAS,EAAIqF,EAAO+C,OAAS,EAClFyC,EAAkBxF,EAAO+C,OAAS,EAAI,EAAIrJ,KAAK+I,SAAS9H,OAAS,EAAIqF,EAAO+C,OAAS,CAGzFzJ,GAAEgB,OAAO0F,EAAO8C,YAAa9C,EAAOyF,SACpC/L,KAAK4G,MAAMiC,QAIX,IAAImD,GAAe1F,EAAOuD,YACtBoC,EAAmBjM,KAAK+I,SAAS+C,GAAiBjC,YAClDqC,EAAmBlM,KAAK+I,SAAS8C,GAAiBhC,YAElDsC,EAAyBnM,KAAK4J,kBAAkBoC,EAAcE,EAClE5F,GAAO0D,kBAAkBoC,UAAUD,EAEnC,IAAIE,GAAyBrM,KAAK4J,kBAAkBoC,EAAcC,EAClE3F,GAAO2D,kBAAkBmC,UAAUC,GAIhCrM,KAAK6B,QAAQuF,gBACZpH,KAAK8I,kBAKbS,iBAAkB,SAASlG,GAEvBrD,KAAKiI,8BAGLjI,KAAKmI,aAITA,UAAW,WAEPnI,KAAK4G,MAAM0F,QAAS,EACpBtM,KAAK4G,MAAM3B,KAAK,YAGpB2E,kBAAmB,SAAS2C,EAASC,GAIjC,GAAI3L,GAAMb,KAAK4G,MAAM9F,KACjB2L,EAAK5L,EAAI6L,QAAQH,GACjBI,EAAK9L,EAAI6L,QAAQF,GAEjB5G,EAAS/E,EAAI+L,UAAUH,EAAGI,KAAKF,GAAIG,UAAU,GAEjD,OAAOlH,MC9efhG,EAAEC,GAAGK,KAAKC,WAAaP,EAAEe,MAAMC,QAC3Bd,WAAY,SAASiN,GAAY,GAAAlG,GAAA7G,IAE7BA,MAAKoE,YAAc2I,EACnB/M,KAAKgN,QAAUD,EAAWtC,WAE1B,IAAIwC,IAAmB,UAAW,eAAgB,UAAW,aAE7DjN,MAAKgN,QAAQE,QAAQ,SAAC7G,GAGlB4G,EAAgBC,QAAQ,SAACC,GACrB9G,EAAMvB,GAAGqI,EAAOtG,EAAKuG,WAArBvG,KAIJR,EAAMpG,GAAGmE,YAAcyC,EAAKzC,cAOhCpE,KAAKoE,YAAYU,GAAG,WAAY,SAACzB,GAE7BwD,EAAK/G,WAAWiN,GAIb1J,EAAE4D,OAAOhH,GAAGmF,WACXyB,EAAKtF,OAAOsF,EAAKwG,iBAI7BD,WAAY,SAAS/J,GACjBrD,KAAKoE,YAAYkJ,UAAUjK,EAAEsI,KAAMtI,IAEvC+C,WAAY,SAASvE,GACjB7B,KAAKuN,SAAW1L,EAChB7B,KAAKgN,QAAQE,QAAQ,SAAA7G,GACjBA,EAAMpG,GAAGmG,WAAWvE,MAG5BN,OAAQ,SAASM,GACb7B,KAAKuN,SAAW1L,EAChB7B,KAAKgN,QAAQE,QAAQ,SAAA7G,GACjBA,EAAMpG,GAAGsB,OAAOM,MAGxBL,QAAS,WACLxB,KAAKgN,QAAQE,QAAQ,SAAA7G,GACjBA,EAAMpG,GAAGuB,aAGjB4D,QAAS,QAAAA,KAIL,IAAI,GAFAA,IAAU,EAENpE,EAAE,EAAGA,EAAEhB,KAAKgN,QAAQ/L,UACxBmE,EAAUpF,KAAKgN,QAAQhM,GAAGf,GAAGmF,WADGpE,KAOpC,MAAOoE,IAEXyC,SAAU,QAAAA,KAIN,IAAI,GAFAA,IAAW,EAEP7G,EAAE,EAAGA,EAAEhB,KAAKgN,QAAQ/L,UACxB4G,EAAW7H,KAAKgN,QAAQhM,GAAGf,GAAG4H,YADE7G,KAOpC,MAAO6G,IAEXwF,WAAY,WACR,MAAOrN,MAAKuN","file":"leaflet.pm.min.js","sourcesContent":["\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n\n        var initLayerGroup = function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        var initPolygon = function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n        var initMap = function initMap() {\n            this.pm = new L.PM.Draw(this);\n        };\n        L.Map.addInitHook(initMap);\n    },\n    Edit: {}\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n\n    initialize: function initialize(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        for (var i = 0; i < this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape] = new L.PM.Draw[shape](this._map);\n        }\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enableDraw: function enableDraw(shape) {\n\n        if (!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disableDraw();\n\n        // enable draw for a shape\n        this[shape].enable();\n    },\n    disableDraw: function disableDraw() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        for (var i = 0; i < this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape].disable();\n        }\n    },\n    addControls: function addControls() {\n        // add control buttons for our shapes\n        for (var i = 0; i < this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape].addButton();\n        }\n    }\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function initialize(options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function onAdd(map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function onRemove(map) {},\n\n    setButton: function setButton(options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function getText() {\n        return this._button.text;\n    },\n\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _makeButton: function _makeButton(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) L.DomUtil.addClass(newButton, 'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent.addListener(newButton, 'click', button.onClick, this).addListener(newButton, 'click', this._clicked, this).addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _clicked: function _clicked() {\n\n        if (this._button.doToggle) {\n\n            if (this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0], 'active');\n            } else {\n                L.DomUtil.addClass(this._container.childNodes[0], 'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n\"use strict\";\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function enable(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], { color: 'red' });\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    addButton: function addButton(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick() {},\n            'afterClick': function afterClick(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function (e) {\n            if (e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function (e) {\n            if (e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n    },\n    _syncHintLine: function _syncHintLine(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishPolygon: function _finishPolygon() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if (first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.Class.extend({\n\n    initialize: function initialize(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', function (e) {\n                _this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if (window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if (this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n    },\n\n    enabled: function enabled() {\n        return this._enabled;\n    },\n\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._poly : arguments[0];\n\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function dragging() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this2 = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp(e) {\n\n            // re-enable map drag\n            _this2._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            _this2._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            _this2._poly.off('mouseup');\n\n            // show markers again\n            _this2._initMarkers();\n\n            // set new coordinates, more details inside the function\n            _this2._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this2._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this2._poly.fire('pm:dragend');\n\n                // fire edit\n                _this2._fireEdit();\n            }, 10);\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n\n            if (!_this2._dragging) {\n\n                // set state\n                _this2._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this2._poly.bringToFront();\n\n                // disbale map drag\n                _this2._poly._map.dragging.disable();\n\n                // hide markers\n                _this2._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this2._poly.fire('pm:dragstart');\n            }\n\n            _this2._onLayerDrag(e);\n        };\n\n        this._poly.on('mousedown', function (e) {\n\n            // save for delta calculation\n            _this2._tempDragCoord = e.latlng;\n\n            _this2._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this2._poly._map.on('mousemove', onMouseMove);\n        });\n    },\n\n    _onLayerDrag: function _onLayerDrag(e) {\n\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = this._poly._latlngs[0];\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n    },\n\n    _initMarkers: function _initMarkers() {\n        var map = this._poly._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this3 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var icon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this3._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._poly._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        var coords = this._poly._latlngs[0];\n        var index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // create the new middlemarker\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        var leftM = this._markers[leftMarkerIndex];\n        var rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n    _handleOverlap: function _handleOverlap() {\n\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n\n    _onMarkerDrag: function _onMarkerDrag(e) {\n\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n    },\n\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n'use strict';\n\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        var availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach(function (layer) {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach(function (event) {\n                layer.on(event, _this._fireEvent, _this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = _this._layerGroup;\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n\n            _this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n\n        var enabled = false;\n\n        for (var i = 0; i < this._layers.length; i++) {\n            enabled = this._layers[i].pm.enabled();\n            if (enabled) {\n                break;\n            }\n        }\n\n        return enabled;\n    },\n    dragging: function dragging() {\n\n        var dragging = false;\n\n        for (var i = 0; i < this._layers.length; i++) {\n            dragging = this._layers[i].pm.dragging();\n            if (dragging) {\n                break;\n            }\n        }\n\n        return dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function() {\n\n        var initLayerGroup = function() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n\n        var initPolygon = function() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n\n        var initMap = function() {\n            this.pm = new L.PM.Draw(this);\n        };\n        L.Map.addInitHook(initMap);\n\n    },\n    Edit: {}\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Draw = L.Class.extend({\n\n    initialize: function(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        for(var i=0; i<this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape] = new L.PM.Draw[shape](this._map);\n        }\n\n    },\n    getShapes: function() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enableDraw: function(shape) {\n\n        if(!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disableDraw();\n\n        // enable draw for a shape\n        this[shape].enable();\n\n    },\n    disableDraw: function() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        for(var i=0; i<this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape].disable();\n        }\n\n    },\n    addControls: function() {\n        // add control buttons for our shapes\n        for(var i=0; i<this.shapes.length; i++) {\n            var shape = this.shapes[i];\n            this[shape].addButton();\n        }\n    }\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function (options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function (map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function (map) {\n    },\n\n    setButton: function (options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function () {\n        return this._button.text;\n    },\n\n    getIconUrl: function () {\n        return this._button.iconUrl;\n    },\n\n    destroy: function () {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function (e) {\n        if(typeof e === 'boolean'){\n            this._button.toggleStatus = e;\n        }\n        else{\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n    },\n    toggled: function () {\n        return this._button.toggleStatus;\n    },\n    onCreate: function() {\n        this.toggle(false);\n    },\n    _makeButton: function(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus)\n            L.DomUtil.addClass(newButton,'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent\n            .addListener(newButton, 'click', button.onClick, this)\n            .addListener(newButton, 'click', this._clicked, this)\n            .addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n\n    },\n\n    _clicked: function () {\n\n        if(this._button.doToggle){\n\n            if(this._button.toggleStatus) {\n                L.DomUtil.removeClass(this._container.childNodes[0],'active');\n            }\n            else {\n                L.DomUtil.addClass(this._container.childNodes[0],'active');\n            }\n            this.toggle();\n        }\n        return;\n    }\n\n});\n","L.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function(map) {\n        this._map = map;\n        this._shape = 'Poly';\n    },\n    enable: function(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], {color: 'red'});\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', {shape: this._shape});\n\n    },\n    disable: function() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', {shape: this._shape});\n\n    },\n    enabled: function() {\n        return this._enabled;\n    },\n    toggle: function(options) {\n\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n\n    },\n    addButton: function(map) {\n\n        var self = this;\n\n        var drawPolyButton = {\n              'className': 'icon-polygon',\n              'onClick': function() {\n\n              },\n              'afterClick': function(e) {\n                  self.toggle();\n              },\n              'doToggle': true,\n              'toggleStatus': false\n        };\n\n        this._drawButton = new L.Control.PMButton(drawPolyButton).addTo(this._map);\n\n        this._map.on('pm:drawstart', function(e) {\n            if(e.shape === self._shape && !self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        this._map.on('pm:drawend', function(e) {\n            if(e.shape === self._shape && self._drawButton.toggled()) {\n                self._drawButton._clicked();\n            }\n        });\n\n        return this._drawButton;\n\n    },\n    _syncHintLine: function(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n\n\n\n    },\n    _createPolygonPoint: function(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n\n    },\n    _finishPolygon: function() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if(first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n\n    },\n});\n","L.PM.Edit.Poly = L.Class.extend({\n\n    initialize: function(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function(options = {}) {\n\n        this.options = options;\n\n        if(!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', (e) => {\n                this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if(window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if(this.options.draggable) {\n                this._initDraggableLayer();\n            }\n        }\n\n    },\n\n    enabled: function() {\n        return this._enabled;\n    },\n\n    disable: function(poly = this._poly) {\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    dragging: function() {\n        return this._dragging;\n    },\n\n    _initDraggableLayer: function() {\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        var onMouseUp = (e) => {\n\n            // re-enable map drag\n            this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            this._poly.off('mouseup');\n\n            // show markers again\n            this._initMarkers();\n\n            // set new coordinates, more details inside the function\n            this._applyPossibleCoordsChanges();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._poly.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n        }\n\n\n        var onMouseMove = (e) => {\n\n            if(!this._dragging) {\n\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._poly.bringToFront();\n\n                // disbale map drag\n                this._poly._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._poly.fire('pm:dragstart');\n\n\n            }\n\n            this._onLayerDrag(e);\n\n        }\n\n        this._poly.on('mousedown', (e) => {\n\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._poly._map.on('mousemove', onMouseMove);\n\n        });\n\n\n\n    },\n\n    _onLayerDrag: function(e) {\n\n        // latLng of mouse event\n        let latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        let deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        let coords = this._poly._latlngs[0];\n        let newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            }\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n\n    },\n\n    _initMarkers: function() {\n        let map = this._poly._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        let coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k+1 >= coords.length ? 0 : k+1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function(latlng, index) {\n\n        let marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function(leftM, rightM) {\n\n        let latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        let middleMarker = this._createMarker(latlng);\n        let icon = L.divIcon({className: 'marker-icon marker-icon-middle'})\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({className: 'marker-icon'});\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function() {\n                var icon = L.divIcon({className: 'marker-icon'});\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n\n\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        let latlng = newM.getLatLng();\n        let coords = this._poly._latlngs[0];\n        let index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _removeMarker: function(e) {\n        let marker = e.target;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(marker._index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        let coords = this._poly._latlngs[0];\n        let index = marker._index;\n\n        coords.splice(index, 1);\n        this._poly.redraw();\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n\n        // create the new middlemarker\n        let leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        let rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        let leftM = this._markers[leftMarkerIndex];\n        let rightM = this._markers[rightMarkerIndex];\n        this._createMiddleMarker(leftM, rightM);\n\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _applyPossibleCoordsChanges: function() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n\n    },\n\n    _drawTemporaryPolygon: function(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({opacity: 0, fillOpacity: 0});\n\n        // draw a temporary polygon (happens during drag)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n\n    },\n    _handleOverlap: function() {\n\n        let mainPoly = this._poly;\n        let layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({opacity: 1, fillOpacity: 0.2});\n        }\n\n\n\n    },\n\n    _onMarkerDrag: function(e) {\n\n        // dragged marker\n        let marker = e.target;\n\n        // the dragged markers neighbors\n        let nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        let prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        let markerLatLng = marker.getLatLng();\n        let prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        let nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        let middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        let middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n    },\n\n    _onMarkerDragEnd: function(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n\n    },\n\n    _fireEdit: function () {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n","\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function(layerGroup) {\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        let availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach((layer) => {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach((event) => {\n                layer.on(event, this._fireEvent, this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = this._layerGroup;\n        });\n\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n            \n            this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function() {\n        this._layers.forEach(layer => {\n            layer.pm.disable();\n        });\n    },\n    enabled: function() {\n\n        var enabled = false;\n\n        for(var i=0; i<this._layers.length; i++) {\n            enabled = this._layers[i].pm.enabled();\n            if(enabled) {\n                break;\n            }\n        }\n\n        return enabled;\n    },\n    dragging: function() {\n\n        var dragging = false;\n\n        for(var i=0; i<this._layers.length; i++) {\n            dragging = this._layers[i].pm.dragging();\n            if(dragging) {\n                break;\n            }\n        }\n\n        return dragging;\n    },\n    getOptions: function() {\n        return this._options;\n    }\n});\n"],"sourceRoot":"/source/"}